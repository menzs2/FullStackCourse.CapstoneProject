@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;

<h3>Login</h3>

<section class="login-form">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit">Login</button>
    </EditForm>
</section>

@code {
    private LoginRequest loginModel = new LoginRequest();

    private async Task HandleLogin()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync($"{HttpClient.BaseAddress}api/auth/login", loginModel);
            response.EnsureSuccessStatusCode();
            var token = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", token);
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",
            token);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Login failed: {ex.Message}");
        }
    }


    public class LoginRequest
    {
        [Required(ErrorMessage = "Email is required.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}